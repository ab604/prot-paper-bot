name: "Update Bot"
on:
  schedule:
    - cron: '0 1,13 * * *' # run the bot twice a day at 0100 and 1300 UTC
  push: # also run the action when something on a new commit
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  blog-updates:
    name: bot
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 #v4 uses node 20
        with:
          fetch-depth: 1 # Speeds up checkout
      
      # ccache for compiled code    
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        
      # Set-up R
      - name: set-up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true
          
      # Create a directory .apt-cache in the workspace to store the .deb files.
      # Cache this directory instead of the system-wide /var/cache/apt/archives.
      # Download the .deb files to the system cache, then copies them to our workspace cache.
      # Install the packages from the downloaded .deb files.    
      - name: Create apt cache directory
        run: |
          mkdir -p ./.apt-cache
          echo "APT_CACHE=$PWD/.apt-cache" >> $GITHUB_ENV

      - name: Create apt package list
        run: |
          echo "libcurl4-openssl-dev" > apt-packages.txt

      - name: Cache system dependencies
        uses: actions/cache@v4
        id: cache-sys-deps
        with:
          path: ${{ env.APT_CACHE }}
          key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-packages.txt') }}

      - name: System dependencies
        run: |
          sudo apt-get update
          sudo apt-get --download-only install -y $(cat apt-packages.txt)
          sudo cp /var/cache/apt/archives/*.deb ${{ env.APT_CACHE }}/
          sudo apt-get install -y $(cat apt-packages.txt)
      
      # Initialize renv if it's not already set up.
      # Use renv to manage package installations.
      # Create or update the renv.lock file.
      # Cache the renv library.
      - name: Initialize renv
        shell: Rscript {0}
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          if (!file.exists("renv.lock")) {
          renv::init(force = TRUE)
          } else {
            renv::restore()
          }
          
      - name: Install dependencies
        shell: Rscript {0}
        run: |
          renv::install(c("jsonlite", "dplyr"))
          deps <- setdiff(unique(renv::dependencies(".")$Package), c("jsonlite", "dplyr"))
          renv::install(deps)
          renv::install("JBGruber/atrrr")
          renv::snapshot()
        
        # Run bot with error check
      - name: "Bot - Run"
        run: |
            tryCatch({
            source('bot.R')
            }, error = function(e) {
            message('Error in bot.R: ', e$message)
            quit(status = 1)
            })
        shell: Rscript {0}
        env:
          ATR_PW: ${{ secrets.ATR_PW }} # to authenticat, store your app pw as a secret
        
      # Write out logs if workflow fails
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: r-logs
          path: |
            *.Rout
            .github/depends.Rds
              
        # After 60 days without a commit, the bot is disabled by GitHub. keepalive-workflow 
        # prevents that
      - name: Keepalive Workflow
        uses: gautamkrishnar/keepalive-workflow@2.0.7
